# Autogenerated input type of AcceptOffer
input AcceptOfferInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  comment: String
  id: ID
  offerId: ID!
  price: Int!
}

# Autogenerated return type of AcceptOffer
type AcceptOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  eventsConnection: ProjectEventConnection
  newEventEdge: ProjectEventEdge
  project: Project!
}

# Autogenerated input type of ActivatePaidSocial
input ActivatePaidSocialInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  facebookBusinessId: String!
  id: ID
  projectId: ID!
}

# Autogenerated return type of ActivatePaidSocial
type ActivatePaidSocialPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  paidSocialActivation: PaidSocialActivation!
}

# Represents an entity that a certain action is coming from. In case of a project
# message it could be the creator or the brand (not the advertiser, because from
# the creator's point of view they are talking to a brand).
interface Actor {
  # A URL pointing to the actor's avatar image.
  avatarUrl: String
  id: ID!

  # The name of the actor.
  name: String
}

# Autogenerated input type of AddInfluencerToFavorites
input AddInfluencerToFavoritesInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
  influencerIgid: InstagramId!
}

# Autogenerated return type of AddInfluencerToFavorites
type AddInfluencerToFavoritesPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  influencerIgid: InstagramId!
}

# Autogenerated input type of AddInfluencerToMediaplan
input AddInfluencerToMediaplanInput {
  campaignId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
  influencerIgid: InstagramId!
}

# Autogenerated return type of AddInfluencerToMediaplan
type AddInfluencerToMediaplanPayload {
  campaign: Campaign!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  mediaplanItemConnection: MediaplanItemConnectionEx
  newMediaplanItemEdge: MediaplanItemEdge
}

# Age range for the creator.
type AgeRange {
  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # The name of the age range.
  name: String!
}

# An object that corresponds to a project where the influencer has accepted the
# offer but hasn't advanced further (project hasn't been launched/cancelled yet).
type Application {
  # The date and time when the object was created.
  createdAt: DateTime!

  # The currency of the price
  currency: Currency!
  id: ID!

  # The influencer that applied for participation in the campaign
  influencer: Influencer

  # The price that the influencer agreed to participate in the campaign with.
  price: Int!
}

# The connection type for Application.
type ApplicationConnection {
  # A list of edges.
  edges: [ApplicationEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ApplicationEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Application
}

type AudienceStatistic {
  ageStats: [Stats]!

  # The date and time when the object was created.
  createdAt: DateTime!
  ethnicStats: [Stats]!
  genderStats: [Stats]!
  geoStats: [Stats]!
  id: ID!
  verticalStats: [Stats]!
}

# A brand that is being advertised.
type Brand implements Actor {
  # A URL pointing to the actor's avatar image.
  avatarUrl: String

  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # The logo image of the brand
  logo: Image

  # The name of the brand.
  name: String
}

# The connection type for Brand.
type BrandConnection {
  # A list of edges.
  edges: [BrandEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type BrandEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Brand
}

# A campaign's brief.
type Brief implements Actor {
  # Additional info.
  additionalInfo: String

  # A URL pointing to the actor's avatar image.
  avatarUrl: String

  # The name of the brand account.
  brandAccountName: String

  # The date and time when the object was created.
  createdAt: DateTime!

  # The date and time when the campaign supposed to be finished.
  endDate: DateTime

  # Whether is required the event attendance
  eventAttendance: Boolean!

  # The description of the event.
  eventDescription: String

  # The list of hashtags.
  hashtags: String
  id: ID!

  # The name of the actor.
  name: String

  # Whether the campaign is paid social
  paidSocial: Boolean!

  # The brief cover.
  picture: Image

  # The count of the posts
  postCount: Int

  # The brief files.
  references: [File!]

  # The description of the sample.
  sampleDescription: String

  # The type of the sample provision.
  sampleProvision: SampleProvisionType

  # The date and time when the campaign supposed to be started.
  startDate: DateTime

  # The campaign summary.
  summary: String

  # The description of the task.
  taskDescription: String

  # The description of the text.
  textDescription: String
}

# An object that corresponds to the event of submitting a brief.
type BriefSubmission {
  acceptance: BriefSubmissionAcceptance

  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!
}

# An object that corresponds to the event of accepting a brief submission.
type BriefSubmissionAcceptance {
  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!
}

# An advertising campaign that advertisers can manage.
type Campaign {
  # A campaign activation. Present if the campaign has been activated.
  activation: CampaignActivation

  # A list of influencers who applied for participation in the campaign and are
  # currently pending (accepted the offer and the project hasn't been
  # launched/cancelled yet).
  applications(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): ApplicationConnection

  # The brand that is being advertised.
  brand: Brand

  # A campaign brief.
  brief: Brief

  # A campaign brief submission. Present if the campaign brief has been submitted.
  briefSubmission: BriefSubmission

  # True if the campaign created with the ability to browse creators.
  browseCreators: Boolean

  # The date and time when the object was created.
  createdAt: DateTime!

  # A campaign deactivation. Present if the campaign has been deactivated.
  deactivation: CampaignDeactivation

  # True if the campaign can be deleted.
  deletable: Boolean!
  id: ID!

  # The date and time of the latest campaign's project event.
  latestEventAt: DateTime

  # The creators in the campaign media plan with a summary.
  mediaplan(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # If present, the items are filtered by the project stage.
    projectStage: ProjectStage
  ): MediaplanItemConnectionEx!

  # The ID of the campaign active mediaplan
  mediaplanId: ID

  # A campaign mediaplan submission. Present if the campaign mediaplan has been submitted.
  mediaplanSubmission: MediaplanSubmission

  # The name of the campaign.
  name: String

  # Campaign's closest project deadline.
  nextDeadlineAt: DateTime

  # A list of events that belong to this campaign's projects.
  projectEvents(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): ProjectEventConnectionEx

  # The campaign projects.
  projects(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # If true, return only projects with publications.
    published: Boolean

    # The stage to filter the projects by.
    stage: ProjectStage
  ): ProjectConnection

  # Search for influencers that can be added to the mediaplan.
  searchInfluencers(
    # Returns the elements in the list that come after the specified global ID.
    after: String
    ageRangeIds: [ID!]
    audienceGenderId: ID

    # Returns the elements in the list that come before the specified global ID.
    before: String
    businessAccountEnabled: Boolean
    categoryIds: [ID!]
    cityIds: [ID!]
    countryIds: [ID!]
    currency: Currency
    ethnicityIds: [ID!]
    favorite: Boolean

    # Returns the first _n_ elements from the list.
    first: Int
    followersFrom: Int
    followersTo: Int
    influencerGenderId: ID
    interestIds: [ID!]

    # Returns the last _n_ elements from the list.
    last: Int
    nameQuery: String
    paidSocialEnabled: Boolean
    postPriceFrom: Int
    postPriceTo: Int
    tagIds: [ID!]
  ): InfluencerSearchResultConnectionEx

  # A campaign search query submission. Present if the campaign search query has been submitted.
  searchQuerySubmission: SearchQuerySubmission
}

# An object that corresponds to the event of activating a campaign. Activating a
# campaign means sending initial offers to influencers.
type CampaignActivation {
  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!
}

# The connection type for Campaign.
type CampaignConnection {
  # A list of edges.
  edges: [CampaignEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An object that corresponds to the event of deactivating a campaign. Deactivating
# a campaign means cancelling all offers that are still pending.
type CampaignDeactivation {
  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!
}

# An edge in a connection.
type CampaignEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Campaign
}

# Autogenerated input type of CancelProject
input CancelProjectInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
  projectId: ID!
}

# Autogenerated return type of CancelProject
type CancelProjectPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  eventsConnection: ProjectEventConnection
  newEventEdge: ProjectEventEdge
  project: Project!
}

# Creator's category.
type Category {
  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # The name of the category.
  name: String!
}

# City for the creator.
type City {
  # The iso2 code of the country which city belongs to.
  countryIso2Code: String!

  # The name of the country which city belongs to.
  countryName: String!

  # The date and time when the object was created.
  createdAt: DateTime!

  # The full name of the city.
  fullName: String!
  id: ID!

  # The name of the city.
  name: String!
}

# The connection type for City.
type CityConnection {
  # A list of edges.
  edges: [CityEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type CityEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: City
}

# Autogenerated input type of CloneCampaign
input CloneCampaignInput {
  campaignId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
}

# Autogenerated return type of CloneCampaign
type CloneCampaignPayload {
  campaign: Campaign!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of CompleteProject
input CompleteProjectInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
  projectId: ID!
}

# Autogenerated return type of CompleteProject
type CompleteProjectPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  eventsConnection: ProjectEventConnection
  newEventEdge: ProjectEventEdge
  project: Project!
}

# Country for the creator.
type Country {
  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # The iso2 code of the country.
  iso2Code: String!

  # The name of the country.
  name: String!
}

# Autogenerated input type of CreateBrand
input CreateBrandInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
  name: String
  organizationId: ID!
}

# Autogenerated return type of CreateBrand
type CreateBrandPayload {
  brand: Brand!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of CreateCampaign
input CreateCampaignInput {
  brandId: ID!
  browseCreators: Boolean

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
  name: String
}

# Autogenerated return type of CreateCampaign
type CreateCampaignPayload {
  campaign: Campaign!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of CreateDeadline
input CreateDeadlineInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  draftDate: Date!
  id: ID
  projectId: ID!
  publicationDate: Date
}

# Autogenerated return type of CreateDeadline
type CreateDeadlinePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  eventsConnection: ProjectEventConnection
  newEventEdge: ProjectEventEdge
  project: Project!
}

# Autogenerated input type of CreateInfluencerRequest
input CreateInfluencerRequestInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
  influencerIgid: InstagramId!
  type: InfluencerRequestType!
}

# Autogenerated return type of CreateInfluencerRequest
type CreateInfluencerRequestPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  influencerRequest: InfluencerRequest!
}

# Autogenerated input type of CreateMessage
input CreateMessageInput {
  attachmentIds: [ID!] = []

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
  projectId: ID!
  text: String!
}

# Autogenerated return type of CreateMessage
type CreateMessagePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  eventsConnection: ProjectEventConnection
  newEventEdge: ProjectEventEdge
  project: Project!
}

# Autogenerated input type of CreatePostPublication
input CreatePostPublicationInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
  instagramUrl: String!
  projectId: ID!
}

# Autogenerated return type of CreatePostPublication
type CreatePostPublicationPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  project: Project!
}

enum Currency {
  CAD
  RUB
  USD
}

# An ISO-8601 encoded date string
scalar Date

# An ISO-8601 encoded UTC date string
scalar DateTime

# Autogenerated input type of DeactivateCampaign
input DeactivateCampaignInput {
  campaignId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
}

# Autogenerated return type of DeactivateCampaign
type DeactivateCampaignPayload {
  campaign: Campaign!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# An object that is created when an advertiser sets deadlines for a project.
type Deadline implements ProjectEvent {
  # The actor who initiated the event.
  actor: Actor

  # The date and time when the object was created.
  createdAt: DateTime!

  # The date when the advertiser expects to receive a content draft from the influencer.
  draftDate: Date
  id: ID!

  # The date when the advertiser expects the influencer to publish the content.
  publicationDate: Date

  # Whether the event has been marked as read by the advertiser.
  readByAdvertiser: Boolean!

  # Whether the event has been marked as read by the contractor.
  readByContractor: Boolean!
}

# Autogenerated input type of DeleteCampaign
input DeleteCampaignInput {
  campaignId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
}

# Autogenerated return type of DeleteCampaign
type DeleteCampaignPayload {
  campaign: Campaign!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Ethnicity for the creator.
type Ethnicity {
  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # The name of the ethnicity.
  name: String!
}

# Category to which the featured creator belongs.
type FeaturedCategory {
  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # The name of the featured category.
  name: String!
}

# Country to which the featured creator belongs.
type FeaturedCountry {
  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # The name of the featured country.
  name: String!
}

# Featured creator.
type FeaturedCreator {
  # The date and time when the object was created.
  createdAt: DateTime!

  # The currency of the price.
  currency: String
  id: ID!

  # The influencer that belongs to the featured creator.
  influencer: Influencer

  # The post price of the featured creator.
  price: Int
}

type FeaturedCreatorConnection {
  creators: [FeaturedCreator!]!
  summary: FeaturedSummary!
}

# Summary for a subset of featured creators.
type FeaturedSummary {
  # The date and time when the object was created.
  createdAt: DateTime!

  # Currency of creators.
  currency: String!
  id: ID!

  # Maximum followers count for creators.
  maxFollowers: Int!

  # Maximum price for creators.
  maxPrice: Int!

  # Minimum followers count for creators.
  minFollowers: Int!

  # Minimal price for creators.
  minPrice: Int!

  # Total count of creators.
  totalCount: Int!
}

# A file stored in Cloudinary.
type File {
  # The date and time when the object was created.
  createdAt: DateTime!

  # Filename of the stored file.
  filename: String
  id: ID!

  # HTTPS URL of the file.
  secureUrl: String!

  # The type of the file.
  type: FileType!

  # HTTP URL of the file.
  url: String!
}

# The connection type for File.
type FileConnection {
  # A list of edges.
  edges: [FileEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type FileEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: File
}

enum FileType {
  IMAGE
  OTHER
  VIDEO
}

# Creator's gender.
type Gender {
  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # The name of the gender.
  name: String!
}

# An image file stored in Cloudinary.
type Image {
  # The date and time when the object was created.
  createdAt: DateTime!

  # Filename of the stored image.
  filename: String!
  id: ID!

  # HTTPS URL of the stored image.
  secureUrl: String!

  # HTTP URL of the stored image.
  url: String!
}

# Information about an influencer's user on Instagram.
type Influencer implements Actor {
  # Information about the audience of the Instagram user.
  audienceStatistic: AudienceStatistic

  # A URL pointing to the actor's avatar image.
  avatarUrl: String

  # The bio of the Instagram user.
  bio: String

  # Whether the influencer is enabled business account in Instagram.
  businessAccountEnabled: Boolean!

  # The engagement rate of the Instagram user calculated for the last 90 days.
  engagementRate: Float

  # The average number of likes the Instagram user's medias for the last 90 days have.
  estimatedLikes: Float

  # The total number of followers of the Instagram user.
  followedByCount: Int!

  # The total number of users the influencer is following on Instagram.
  followsCount: Int!

  # The full name of the Instagram user.
  fullName: String
  id: ID!

  # The ID of the user on Instagram.
  igid: String!

  # The total number of medias of the Instagram user.
  mediaCount: Int!

  # A list of the latest medias of the Instagram user.
  medias(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): MediaConnection

  # The name of the actor.
  name: String!

  # Whether this influencer profile is owned by a user.
  owned: Boolean!

  # Whether the influencer is set up for paid social.
  paidSocialEnabled: Boolean!

  # The profile picture URL of the Instagram user.
  profilePictureUrl: String

  # The username of the Instagram user.
  username: String!

  # The website of the Instagram user.
  website: String
}

# An object that corresponds to an influencer owned by a user.
type InfluencerOwnership {
  # Information about an influencer's user on Instagram.
  influencer: Influencer!

  # A list of events related to the projects featuring the influencer.
  projectEvents(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): ProjectEventConnectionEx
}

# Influencer's request to enable Facebook paid social or Instagram business account.
type InfluencerRequest {
  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!
}

enum InfluencerRequestType {
  # Advertiser wants an influencer to enable IG Business Account
  ENABLE_BUSINESS_ACCOUNT

  # Advertiser wants an influencer to connect Paid Social
  ENABLE_PAID_SOCIAL

  # Advertiser wants us to onboard an influencer
  ONBOARD_INFLUENCER
}

# A result item of an influencer search.
type InfluencerSearchResult {
  # Whether the influencer is in the campaign's mediaplan.
  addedToMediaplan: Boolean!

  # The currency of the price.
  currency: Currency

  # The estimated post price of the influencer.
  estimatedPrice: Int

  # Whether the influencer with the same influencer igid was added to arganization favorites.
  favorite: Boolean!
  influencer: Influencer
}

# The connection type for InfluencerSearchResult.
type InfluencerSearchResultConnectionEx {
  # A list of edges.
  edges: [InfluencerSearchResultEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The total number of search results.
  totalCount: Int!
}

# An edge in a connection.
type InfluencerSearchResultEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: InfluencerSearchResult
}

# An Instagram ID, transported as a string
scalar InstagramId

# Interest for the creator.
type Interest {
  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # The name of the interest.
  name: String!
}

# Autogenerated input type of LaunchProject
input LaunchProjectInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
  projectId: ID!
}

# Autogenerated return type of LaunchProject
type LaunchProjectPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  eventsConnection: ProjectEventConnection
  newEventEdge: ProjectEventEdge
  project: Project!
}

# Autogenerated input type of MarkProjectEventsAsRead
input MarkProjectEventsAsReadInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  uptoEventId: ID!
}

# Autogenerated return type of MarkProjectEventsAsRead
type MarkProjectEventsAsReadPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# A media published on Instagram. Comes from Instagram API.
type Media {
  # The caption of the media on Instagram.
  caption: String

  # The date and time when the media was collected from Instagram.
  collectedAt: DateTime!

  # The total number of comments the media has on Instagram.
  commentCount: Int!

  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # The ID of the media on Instagram.
  igid: String!

  # A list of latest comments to the media.
  latestComments: [MediaComment]!

  # The total number of likes the media has on Instagram.
  likeCount: Int!

  # The shortcode of the media on Instagram.
  shortcode: String!

  # The URL of the standard resolution image of the media
  standardResUrl: String!

  # The URL of the thumbnail-sized image of the media.
  thumbnailUrl: String!

  # The ID of the user who posted the media on Instagram.
  userIgid: String!

  # The URL of the video if the media is a video.
  videoUrl: String

  # The total number of views the media has on Instagram if it's a video.
  viewCount: Int
}

# A comment to a media on Instagram. Comes from Instagram API.
type MediaComment {
  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # The text of the comment.
  text: String!

  # The Instagram ID of the comment author.
  userId: String!

  # The profile picture URL of the comment author.
  userProfilePictureUrl: String!

  # The username of the comment author.
  userUsername: String!
}

# The connection type for Media.
type MediaConnection {
  # A list of edges.
  edges: [MediaEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type MediaEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Media
}

# Mediaplan item.
type MediaplanItem {
  # The date and time when the object was created.
  createdAt: DateTime!

  # The currency of the price.
  currency: Currency

  # The estimated price of the creator.
  estimatedPrice: Int

  # Whether the influencer with the same influencer igid was added to arganization favorites.
  favorite: Boolean!
  id: ID!

  # The influencer that belongs to the featured creator.
  influencer: Influencer

  # The project which belongs the creator.
  project: Project
}

# The connection type for MediaplanItem.
type MediaplanItemConnectionEx {
  # A list of edges.
  edges: [MediaplanItemEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The summary metrics of the specified mediaplan.
  summary: MediaplanSummary!
}

# An edge in a connection.
type MediaplanItemEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: MediaplanItem
}

# An object that corresponds to the event of submitting a mediaplan.
type MediaplanSubmission {
  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!
}

# Summary for a mediaplan.
type MediaplanSummary {
  # Average CPE of creators.
  averageCpe: Float

  # Average engagement of creators.
  averageEngagement: Float

  # The currency of the price
  currency: Currency

  # Total number of creators.
  totalCount: Int

  # Estimated number of likes that would happen if every creator in the mediaplan published a post.
  totalEstimatedLikes: Float

  # Total number of creators' followers.
  totalFollowers: Int

  # Total price of creators.
  totalPrice: Int
}

# An object that is created when an advertiser or an influencer send a message to each other when discussing a project.
type Message implements ProjectEvent {
  # The actor who initiated the event.
  actor: Actor

  # A list of attached files of the message.
  attachments(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): FileConnection

  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # Whether the event has been marked as read by the advertiser.
  readByAdvertiser: Boolean!

  # Whether the event has been marked as read by the contractor.
  readByContractor: Boolean!

  # The message text.
  text: String
}

type Mutation {
  # Accept an offer to participate in a campaign as a creator.
  acceptOffer(input: AcceptOfferInput!): AcceptOfferPayload

  # Given a project, share the creator's FB page and IG account to the specified FB business.
  activatePaidSocial(input: ActivatePaidSocialInput!): ActivatePaidSocialPayload

  # Add an influencer to the advertiser organization favorites.
  addInfluencerToFavorites(input: AddInfluencerToFavoritesInput!): AddInfluencerToFavoritesPayload

  # Add an influencer to a mediaplan.
  addInfluencerToMediaplan(input: AddInfluencerToMediaplanInput!): AddInfluencerToMediaplanPayload

  # Cancel a project.
  cancelProject(input: CancelProjectInput!): CancelProjectPayload

  # Clone a campaign.
  cloneCampaign(input: CloneCampaignInput!): CloneCampaignPayload

  # Mark a project as completed.
  completeProject(input: CompleteProjectInput!): CompleteProjectPayload

  # Create a brand.
  createBrand(input: CreateBrandInput!): CreateBrandPayload

  # Create a campaign.
  createCampaign(input: CreateCampaignInput!): CreateCampaignPayload

  # Create a project deadline.
  createDeadline(input: CreateDeadlineInput!): CreateDeadlinePayload

  # Create an influencer request to enable paid social or Instagram business account or to onboard him.
  createInfluencerRequest(input: CreateInfluencerRequestInput!): CreateInfluencerRequestPayload

  # Create a project message.
  createMessage(input: CreateMessageInput!): CreateMessagePayload

  # Assign a post publication to the project.
  createPostPublication(input: CreatePostPublicationInput!): CreatePostPublicationPayload

  # Deactivate a campaign.
  deactivateCampaign(input: DeactivateCampaignInput!): DeactivateCampaignPayload

  # Delete a campaign.
  deleteCampaign(input: DeleteCampaignInput!): DeleteCampaignPayload

  # Launch a project.
  launchProject(input: LaunchProjectInput!): LaunchProjectPayload

  # Mark all project events as read upto a certain event.
  markProjectEventsAsRead(input: MarkProjectEventsAsReadInput!): MarkProjectEventsAsReadPayload

  # Reject an offer to participate in a campaign as a creator.
  rejectOffer(input: RejectOfferInput!): RejectOfferPayload

  # Remove an influencer from the advertiser organization favorites.
  removeInfluencerFromFavorites(input: RemoveInfluencerFromFavoritesInput!): RemoveInfluencerFromFavoritesPayload

  # Remove an influencer from a mediaplan.
  removeInfluencerFromMediaplan(input: RemoveInfluencerFromMediaplanInput!): RemoveInfluencerFromMediaplanPayload

  # Submit a brief.
  submitBrief(input: SubmitBriefInput!): SubmitBriefPayload

  # Submit a mediaplan.
  submitMediaplan(input: SubmitMediaplanInput!): SubmitMediaplanPayload

  # Submit a search query.
  submitSearchQuery(input: SubmitSearchQueryInput!): SubmitSearchQueryPayload
}

# An offer to creator to participate in a campaign.
type Offer implements ProjectEvent {
  # An object that is created when the offer is accepted.
  acceptance: OfferAcceptance

  # The actor who initiated the event.
  actor: Actor

  # The date and time when the object was created.
  createdAt: DateTime!

  # The currency of the price.
  currency: Currency!
  id: ID!

  # The price offered by the advertiser.
  price: Int!

  # Whether the event has been marked as read by the advertiser.
  readByAdvertiser: Boolean!

  # Whether the event has been marked as read by the contractor.
  readByContractor: Boolean!

  # An object that is created when the offer is readed.
  readMark: OfferReadMark

  # An object that is created when the offer is rejected.
  rejection: OfferRejection
}

# An object that is created when a creator accepts an offer.
type OfferAcceptance implements ProjectEvent {
  # The actor who initiated the event.
  actor: Actor

  # The comment the creator left when accepting the offer.
  comment: String

  # The date and time when the object was created.
  createdAt: DateTime!

  # The currency of the price.
  currency: Currency
  id: ID!

  # The price the creator specified when accepting the offer.
  price: Int

  # Whether the event has been marked as read by the advertiser.
  readByAdvertiser: Boolean!

  # Whether the event has been marked as read by the contractor.
  readByContractor: Boolean!
}

# An object that is created when a creator reads an offer.
type OfferReadMark implements ProjectEvent {
  # The actor who initiated the event.
  actor: Actor

  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # Whether the event has been marked as read by the advertiser.
  readByAdvertiser: Boolean!

  # Whether the event has been marked as read by the contractor.
  readByContractor: Boolean!
}

# An object that is created when a creator rejects an offer.
type OfferRejection implements ProjectEvent {
  # The actor who initiated the event.
  actor: Actor

  # The comment the creator left when rejecting the offer.
  comment: String

  # The date and time when the object was created.
  createdAt: DateTime!

  # The currency of the price.
  currency: Currency
  id: ID!

  # The price the creator specified when rejecting the offer.
  price: Int

  # Whether the event has been marked as read by the advertiser.
  readByAdvertiser: Boolean!

  # Whether the event has been marked as read by the contractor.
  readByContractor: Boolean!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

# An object that is created when an activates paid social for a project.
type PaidSocialActivation {
  # The date and time when the object was created.
  createdAt: DateTime!

  # The FB Business ID
  facebookBusinessId: String

  # The FB Business name
  facebookBusinessName: String

  # The FB Business picture URL
  facebookBusinessPictureUrl: String

  # The FB Page ID
  facebookPageId: String

  # The FB Page name
  facebookPageName: String

  # The FB Page picture URL
  facebookPagePictureUrl: String
  id: ID!
}

# An Instagram post published by a creator.
type PostPublication implements ProjectEvent {
  # The actor who initiated the event.
  actor: Actor

  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # The URL of the post on Instagram.
  instagramUrl: String!

  # The Instagram media of the post.
  media: Media

  # Whether the event has been marked as read by the advertiser.
  readByAdvertiser: Boolean!

  # Whether the event has been marked as read by the contractor.
  readByContractor: Boolean!
}

# An object that is created when a creator changes the price for a project.
type PriceChange implements ProjectEvent {
  # The actor who initiated the event.
  actor: Actor

  # The comment the creator left when changing the price.
  comment: String

  # The date and time when the object was created.
  createdAt: DateTime!

  # The currency of the price.
  currency: Currency!
  id: ID!

  # The price the creator has set.
  price: Int!

  # Whether the event has been marked as read by the advertiser.
  readByAdvertiser: Boolean!

  # Whether the event has been marked as read by the contractor.
  readByContractor: Boolean!
}

# An object that corresponds to the work of an influencer for a certain campaign, start to finish.
type Project {
  # The brand that is being advertised.
  brand: Brand

  # The campaign the project belongs to.
  campaign: Campaign!

  # An object that is present if the project was cancelled.
  cancellation: ProjectCancellation

  # An object that is present if the project was completed.
  completion: ProjectCompletion

  # The date and time when the object was created.
  createdAt: DateTime!

  # The currency of the price
  currency: Currency

  # The deadlines of the project.
  deadline: Deadline

  # A list of events concerning the project, including messages and other types of events.
  events(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): ProjectEventConnectionEx

  # Whether the influencer with the same influencer igid was added to arganization favorites.
  favorite: Boolean!
  id: ID!

  # The influencer that is working on the project.
  influencer: Influencer

  # An object that is present if the project was launched.
  launch: ProjectLaunch

  # The offer that was sent to the creator.
  offer: Offer

  # The latest paid social activation of the project.
  paidSocialActivation: PaidSocialActivation

  # The post that was published by the creator as part of the project.
  postPublication: PostPublication

  # The compensation that the creator will receive for participating in the campaign.
  price: Int
}

# An object that is created when a project is cancelled.
type ProjectCancellation implements ProjectEvent {
  # The actor who initiated the event.
  actor: Actor

  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # Whether the event has been marked as read by the advertiser.
  readByAdvertiser: Boolean!

  # Whether the event has been marked as read by the contractor.
  readByContractor: Boolean!
}

# An object that is created when an advertiser marks a project as completed.
type ProjectCompletion implements ProjectEvent {
  # The actor who initiated the event.
  actor: Actor

  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # Whether the event has been marked as read by the advertiser.
  readByAdvertiser: Boolean!

  # Whether the event has been marked as read by the contractor.
  readByContractor: Boolean!
}

# The connection type for Project.
type ProjectConnection {
  # A list of edges.
  edges: [ProjectEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ProjectEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Project
}

# An event that happened within the context of a project. Usually created as a
# result of an advertiser or a creator making an action, e.g. sending a message.
interface ProjectEvent {
  # The actor who initiated the event.
  actor: Actor

  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # Whether the event has been marked as read by the advertiser.
  readByAdvertiser: Boolean!

  # Whether the event has been marked as read by the contractor.
  readByContractor: Boolean!
}

# The connection type for ProjectEvent.
type ProjectEventConnection {
  # A list of edges.
  edges: [ProjectEventEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# The connection type for ProjectEvent.
type ProjectEventConnectionEx {
  # A list of edges.
  edges: [ProjectEventEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The number of events the current user hasn't seen yet.
  unreadCount: Int!
}

type ProjectEventCreatedPayload {
  eventsConnection: ProjectEventConnection
  newEventEdge: ProjectEventEdge
  project: Project!
}

# An edge in a connection.
type ProjectEventEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: ProjectEvent
}

# An object that is created when an advertiser launches a project.
type ProjectLaunch implements ProjectEvent {
  # The actor who initiated the event.
  actor: Actor

  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # Whether the event has been marked as read by the advertiser.
  readByAdvertiser: Boolean!

  # Whether the event has been marked as read by the contractor.
  readByContractor: Boolean!
}

# The stages of a project.
enum ProjectStage {
  # A project where the influencer has accepted the offer but has yet to be onboarded.
  ACCEPTED

  # A project where the advertiser has finished the deal.
  COMPLETED

  # A project where the influencer has been onboarded.
  LAUNCHED
}

type Query {
  # A list of creator's age ranges.
  ageRanges: [AgeRange!]!

  # A list of brands the current user works with as an advertiser.
  brands(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): BrandConnection

  # Find a campaign by ID
  campaign(id: ID!): Campaign!

  # A list of campaigns the current user can view as an advertiser.
  campaigns(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    brandNames: [String!]

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: String
  ): CampaignConnection

  # A list of creator's categories.
  categories: [Category!]!

  # A list of creator's cities.
  cities(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    country_code: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
    query: String!
  ): CityConnection

  # A list of creator's countries.
  countries: [Country!]!

  # A list of creator's ethnicities.
  ethnicities: [Ethnicity!]!

  # A list of featured categories for the featured creators.
  featuredCategories: [FeaturedCategory!]!

  # A list of featured countries for the featured creators.
  featuredCountries: [FeaturedCountry!]!

  # Metrics for the specified featured creator.
  featuredCreator(id: ID!): FeaturedCreator!

  # A list of featured creators with summary for specified country and category.
  featuredCreators(countryId: ID!, categoryId: ID!): FeaturedCreatorConnection!

  # Metrics for specified country and category for featured creators.
  featuredSummary(countryId: ID!, categoryId: ID!): FeaturedSummary!

  # A list of creator's genders.
  genders: [Gender!]!

  # Find an influencer by Instagram ID.
  influencer(igid: ID!): Influencer!

  # A list of influencers that are owned by the current user.
  influencerOwnerships: [InfluencerOwnership!]!

  # A list of creator's interests.
  interests: [Interest!]!

  # Find a project by ID
  project(id: ID!): Project!

  # A list of projects the current user can view as a contractor.
  projects(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): ProjectConnection

  # A list of creator's tags.
  tags: [Tag!]!
}

# Autogenerated input type of RejectOffer
input RejectOfferInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  comment: String
  id: ID
  offerId: ID!
}

# Autogenerated return type of RejectOffer
type RejectOfferPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  eventsConnection: ProjectEventConnection
  newEventEdge: ProjectEventEdge
  project: Project!
}

# Autogenerated input type of RemoveInfluencerFromFavorites
input RemoveInfluencerFromFavoritesInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
  influencerIgid: InstagramId!
}

# Autogenerated return type of RemoveInfluencerFromFavorites
type RemoveInfluencerFromFavoritesPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  influencerIgid: InstagramId!
}

# Autogenerated input type of RemoveInfluencerFromMediaplan
input RemoveInfluencerFromMediaplanInput {
  campaignId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
  influencerIgid: InstagramId!
}

# Autogenerated return type of RemoveInfluencerFromMediaplan
type RemoveInfluencerFromMediaplanPayload {
  campaign: Campaign!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

enum SampleProvisionType {
  GIFT
  NONE
  USAGE
}

# An object that corresponds to the event of submitting a search query.
type SearchQuerySubmission {
  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!
}

type Stats {
  code: String
  name: String!
  percentage: Float
  rank: Float
}

# Autogenerated input type of SubmitBrief
input SubmitBriefInput {
  briefId: ID!
  campaignId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
}

# Autogenerated return type of SubmitBrief
type SubmitBriefPayload {
  campaign: Campaign!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of SubmitMediaplan
input SubmitMediaplanInput {
  campaignId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
}

# Autogenerated return type of SubmitMediaplan
type SubmitMediaplanPayload {
  campaign: Campaign!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of SubmitSearchQuery
input SubmitSearchQueryInput {
  campaignId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  id: ID
  searchQueryId: ID!
}

# Autogenerated return type of SubmitSearchQuery
type SubmitSearchQueryPayload {
  campaign: Campaign!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

type Subscription {
  # Triggered when the summary changes for any campaign that is visible to the current user.
  campaignSummaryUpdated: Campaign

  # Triggered when a project event happens.
  projectEventCreated: ProjectEventCreatedPayload

  # Triggered when the number of unread events of a project changes.
  projectUnreadCountChanged: Project
}

# Tag for the creator.
type Tag {
  # The date and time when the object was created.
  createdAt: DateTime!
  id: ID!

  # The name of the tag.
  name: String!
}